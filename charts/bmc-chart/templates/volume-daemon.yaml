apiVersion: v1
kind: ConfigMap
metadata:
  name: file-sync-script
data:
  nfs_sync_listener.py: |
    import redis
    import subprocess
    import os
    import threading
    import time

    # Global variables for debounce mechanism
    last_sync_time = 0
    debounce_lock = threading.Lock()
    DEBOUNCE_TIME = 5  # Debounce time in seconds
    sync_thread = None
    is_mounted = False

    def setup_nfs():
        global is_mounted
        if is_mounted:
            return True

        print("Setting up NFS mount...")
        setup_script = """
        mkdir -p /mnt/local /mnt/pv
        apk add --no-cache nfs-utils rsync
        """
        process = subprocess.run(['/bin/sh', '-c', setup_script], capture_output=True, text=True)
        if process.returncode != 0:
            print(f"Setup failed: {process.stderr}")
            return False

        # Try to mount NFS
        mount_cmd = "mount -o nolock,vers=4 nfs-service:/ /mnt/pv"
        process = subprocess.run(['/bin/sh', '-c', mount_cmd], capture_output=True, text=True)
        if process.returncode != 0:
            print(f"Mount failed: {process.stderr}")
            return False

        is_mounted = True
        return True

    def run_sync_operation():
        print(f"Running NFS to local sync operation!")

        if not setup_nfs():
            print("Failed to setup NFS, skipping sync")
            return

        # Use rsync with --delete to ensure local directory exactly matches source
        sync_script = """
        rsync -av --delete --exclude '/mnt/local' /mnt/pv/ /mnt/local/
        """

        process = subprocess.run(['/bin/sh', '-c', sync_script], capture_output=True, text=True)
        if process.returncode != 0:
            print(f"Error during sync operation: {process.stderr}")
        else:
            print(f"Sync operation completed successfully: {process.stdout}")

    def debounce_sync():
        global last_sync_time, sync_thread
        while True:
            current_time = time.time()
            with debounce_lock:
                if current_time - last_sync_time >= DEBOUNCE_TIME:
                    print("Debounced - running sync operation")
                    run_sync_operation()
                    last_sync_time = 0
                    sync_thread = None
                    return
            time.sleep(1)

    def reset_debounce_timer():
        global last_sync_time, sync_thread
        with debounce_lock:
            last_sync_time = time.time()
        if sync_thread is None:
            sync_thread = threading.Thread(target=debounce_sync)
            sync_thread.start()

    def main():
        # Initial setup and sync
        if not setup_nfs():
            print("Initial setup failed, exiting...")
            return

        run_sync_operation()

        # Connect to Redis
        r = redis.Redis(host='redis-service', port=6379, decode_responses=True)
        pubsub = r.pubsub()
        pubsub.subscribe('file_changes')
        print("Listening for file change messages...")

        try:
            for message in pubsub.listen():
                if message['type'] == 'message':
                    print(f"Received message: {message['data']}")
                    reset_debounce_timer()
        except KeyboardInterrupt:
            print("Listener stopped.")
        finally:
            if sync_thread is not None:
                sync_thread.join()
            pubsub.close()

    if __name__ == "__main__":
        main()

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nfs-local-sync
  labels:
    app: nfs-local-sync
spec:
  selector:
    matchLabels:
      app: nfs-local-sync
  template:
    metadata:
      labels:
        app: nfs-local-sync
    spec:
      containers:
      - name: sync-container
        image: python:3.11-alpine  # Changed to alpine for better compatibility with apk
        command: ["/bin/sh", "-c"]
        args:
          - |
            pip install redis && \
            python /scripts/nfs_sync_listener.py
        securityContext:
          privileged: true
        volumeMounts:
        - name: nfs-volume
          mountPath: /mnt/pv
        - name: local-volume
          mountPath: /mnt/local
        - name: sync-script
          mountPath: /scripts
      volumes:
      - name: nfs-volume
        hostPath:
          path: /mnt/pv
          type: DirectoryOrCreate
      - name: local-volume
        hostPath:
          path: /mnt/local
          type: DirectoryOrCreate
      - name: sync-script
        configMap:
          name: file-sync-script
      restartPolicy: Always