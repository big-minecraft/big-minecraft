apiVersion: v1
kind: ConfigMap
metadata:
  name: file-sync-script
data:
  nfs_sync_listener.py: |
    import json
    import redis
    import subprocess
    import os
    import threading
    import time
    import logging
    from redis.exceptions import TimeoutError, ConnectionError

    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )

    last_sync_time = 0
    debounce_lock = threading.Lock()
    DEBOUNCE_TIME = 5
    sync_thread = None
    is_mounted = False
    redis_client = None  # Global Redis client


    def get_redis_client():
        """Get or create a Redis client"""
        global redis_client
        if redis_client is None:
            try:
                redis_client = redis.Redis(
                    host='redis-service',
                    port=6379,
                    decode_responses=True,
                    socket_timeout=5,
                    socket_keepalive=True,
                    health_check_interval=30
                )
            except Exception as e:
                logging.error(f"Failed to create Redis client: {e}")
                return None
        return redis_client


    def verify_mount():
        """Verify NFS mount is working and accessible"""
        try:
            # Check if mount point exists
            if not os.path.exists('/mnt/pv'):
                logging.error("Mount point /mnt/pv does not exist")
                return False

            # Check if we can list directory contents
            try:
                contents = os.listdir('/mnt/pv')
                logging.info(f"NFS contents: {contents}")
            except Exception as e:
                logging.error(f"Cannot list NFS directory: {e}")
                return False

            # Check mount status
            process = subprocess.run(
                "mount | grep '/mnt/pv'",
                shell=True,
                capture_output=True,
                text=True
            )
            if process.returncode != 0:
                logging.error("NFS not in mount list")
                return False

            logging.info("Mount verification successful")
            return True

        except Exception as e:
            logging.error(f"Mount verification failed: {e}")
            return False


    def setup_nfs():
        global is_mounted

        logging.info("Setting up NFS...")

        # Unmount if already mounted
        subprocess.run("umount -f /mnt/pv 2>/dev/null", shell=True)

        setup_script = """
        mkdir -p /mnt/local /mnt/pv
        apk add --no-cache nfs-utils rsync
        """

        try:
            process = subprocess.run(
                ['/bin/sh', '-c', setup_script],
                capture_output=True,
                text=True
            )
            if process.returncode != 0:
                logging.error(f"Setup failed: {process.stderr}")
                return False

            # Mount NFS with more detailed options
            mount_cmd = "mount -v -t nfs -o vers=4,nolock nfs-service:/ /mnt/pv"
            process = subprocess.run(
                ['/bin/sh', '-c', mount_cmd],
                capture_output=True,
                text=True
            )
            logging.info(f"Mount output: {process.stdout}")
            if process.stderr:
                logging.error(f"Mount stderr: {process.stderr}")

            if process.returncode != 0:
                logging.error("Mount failed")
                return False

            # Verify mount
            if not verify_mount():
                logging.error("Mount verification failed")
                return False

            is_mounted = True
            return True

        except Exception as e:
            logging.error(f"Unexpected error during setup: {e}")
            return False


    def send_sync_notification(success):
        """Send a notification to Redis about sync status"""
        r = get_redis_client()
        if r is None:
            logging.error("Failed to get Redis client for notification")
            return False

        try:
            timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
            message = {
                "event": "sync_completed",
                "success": success,
                "timestamp": timestamp
            }

            r.publish('sync-status', json.dumps(message))
            logging.info(f"Published sync status to Redis: {message}")
            return True
        except Exception as e:
            logging.error(f"Failed to publish sync status: {e}")
            return False


    def run_sync_operation():
        logging.info("Starting sync operation")

        if not verify_mount():
            logging.warning("Mount verification failed, attempting remount")
            if not setup_nfs():
                logging.error("Failed to setup NFS, skipping sync")
                send_sync_notification(False, "Failed to setup NFS mount")
                return False

        # List contents before sync
        try:
            nfs_contents = os.listdir('/mnt/pv')
            local_contents = os.listdir('/mnt/local')
            logging.info(f"Pre-sync NFS contents: {nfs_contents}")
            logging.info(f"Pre-sync local contents: {local_contents}")
        except Exception as e:
            logging.error(f"Error listing contents: {e}")

        sync_script = """
        rsync -av --delete --exclude '/mnt/local' /mnt/pv/ /mnt/local/ --stats
        """

        try:
            process = subprocess.run(
                ['/bin/sh', '-c', sync_script],
                capture_output=True,
                text=True,
                timeout=300
            )

            if process.returncode != 0:
                logging.error(f"Sync operation failed: {process.stderr}")
                send_sync_notification(False, f"Rsync error: {process.stderr}")
                return False

            # List contents after sync
            try:
                nfs_contents = os.listdir('/mnt/pv')
                local_contents = os.listdir('/mnt/local')
                logging.info(f"Post-sync NFS contents: {nfs_contents}")
                logging.info(f"Post-sync local contents: {local_contents}")
            except Exception as e:
                logging.error(f"Error listing contents after sync: {e}")

            logging.info("Sync operation completed")

            # Send success notification
            send_sync_notification(True)
            return True

        except subprocess.TimeoutExpired:
            logging.error("Sync operation timed out")
            send_sync_notification(False, "Sync operation timed out")
            return False
        except Exception as e:
            logging.error(f"Unexpected error during sync: {e}")
            send_sync_notification(False, f"Unexpected error: {str(e)}")
            return False


    def handle_redis_connection():
        while True:
            try:
                logging.info("Connecting to Redis...")
                r = redis.Redis(
                    host='redis-service',
                    port=6379,
                    decode_responses=True,
                    socket_timeout=5,
                    socket_keepalive=True,
                    health_check_interval=30
                )

                # Set the global Redis client
                global redis_client
                redis_client = r

                pubsub = r.pubsub(ignore_subscribe_messages=True)
                pubsub.subscribe('file_changes')
                logging.info("Successfully connected to Redis and subscribed to file_changes")

                while True:
                    try:
                        message = pubsub.get_message(timeout=1.0)
                        if message and message['type'] == 'message':
                            logging.info(f"Received message: {message['data']}")
                            reset_debounce_timer()
                    except TimeoutError:
                        # This is expected, just continue
                        continue
                    except Exception as e:
                        logging.error(f"Error processing message: {e}")
                        raise

            except (ConnectionError, TimeoutError) as e:
                logging.error(f"Redis connection error: {e}")
                logging.info("Retrying in 5 seconds...")
                time.sleep(5)
                continue
            except Exception as e:
                logging.error(f"Unexpected error: {e}")
                logging.info("Retrying in 5 seconds...")
                time.sleep(5)
                continue


    def debounce_sync():
        global last_sync_time, sync_thread
        logging.info("Starting debounced sync")

        while True:
            current_time = time.time()
            with debounce_lock:
                if current_time - last_sync_time >= DEBOUNCE_TIME:
                    logging.info("Debounce period elapsed, executing sync")
                    run_sync_operation()
                    last_sync_time = 0
                    sync_thread = None
                    return
            time.sleep(1)


    def reset_debounce_timer():
        global last_sync_time, sync_thread
        with debounce_lock:
            last_sync_time = time.time()
            logging.info(f"Debounce timer reset. Next sync in {DEBOUNCE_TIME} seconds")

        if sync_thread is None or not sync_thread.is_alive():
            sync_thread = threading.Thread(target=debounce_sync)
            sync_thread.daemon = True
            sync_thread.start()
            logging.info("Started new sync thread")


    def main():
        logging.info("Starting NFS sync service")

        if not setup_nfs():
            logging.error("Initial setup failed, exiting...")
            return

        if not run_sync_operation():
            logging.error("Initial sync failed, but continuing to listen for changes...")

        handle_redis_connection()


    if __name__ == "__main__":
        main()
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nfs-local-sync
  labels:
    app: nfs-local-sync
spec:
  selector:
    matchLabels:
      app: nfs-local-sync
  template:
    metadata:
      labels:
        app: nfs-local-sync
    spec:
      containers:
      - name: sync-container
        image: python:3.11-alpine
        command: ["/bin/sh", "-c"]
        args:
          - |
            apk add --no-cache rsync nfs-utils && \
            pip install redis && \
            python /scripts/nfs_sync_listener.py
        securityContext:
          privileged: true
        volumeMounts:
        - name: nfs-volume
          mountPath: /mnt/pv
        - name: local-volume
          mountPath: /mnt/local
        - name: sync-script
          mountPath: /scripts
      volumes:
      - name: nfs-volume
        hostPath:
          path: /mnt/pv
          type: DirectoryOrCreate
      - name: local-volume
        hostPath:
          path: /mnt/local
          type: DirectoryOrCreate
      - name: sync-script
        configMap:
          name: file-sync-script
      restartPolicy: Always