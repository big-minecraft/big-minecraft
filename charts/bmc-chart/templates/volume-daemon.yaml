apiVersion: v1
kind: ConfigMap
metadata:
  name: file-sync-script
data:
  nfs_sync_listener.py: |
    import redis
    import subprocess
    import os
    import threading
    import time
    import logging
    from redis.exceptions import TimeoutError, ConnectionError

    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )

    # Global variables
    last_sync_time = 0
    debounce_lock = threading.Lock()
    DEBOUNCE_TIME = 5
    sync_thread = None
    is_mounted = False

    def check_mount_status():
        try:
            result = subprocess.run(
                "mount | grep '/mnt/pv'",
                shell=True,
                capture_output=True,
                text=True
            )
            return result.returncode == 0
        except Exception as e:
            logging.error(f"Error checking mount status: {e}")
            return False

    def setup_nfs():
        global is_mounted

        logging.info("Checking NFS setup...")

        if check_mount_status():
            logging.info("NFS is already mounted")
            is_mounted = True
            return True

        logging.info("Setting up NFS mount...")
        setup_script = """
        mkdir -p /mnt/local /mnt/pv
        apk add --no-cache nfs-utils rsync
        """

        try:
            process = subprocess.run(
                ['/bin/sh', '-c', setup_script],
                capture_output=True,
                text=True,
                timeout=30
            )
            if process.returncode != 0:
                logging.error(f"Setup failed: {process.stderr}")
                return False

            mount_cmd = "mount -o nolock,vers=4 nfs-service:/ /mnt/pv"
            process = subprocess.run(
                ['/bin/sh', '-c', mount_cmd],
                capture_output=True,
                text=True,
                timeout=30
            )
            if process.returncode != 0:
                logging.error(f"Mount failed: {process.stderr}")
                return False

            is_mounted = True
            logging.info("NFS setup completed successfully")
            return True

        except subprocess.TimeoutExpired:
            logging.error("Setup/mount operation timed out")
            return False
        except Exception as e:
            logging.error(f"Unexpected error during setup: {e}")
            return False

    def run_sync_operation():
        logging.info("Starting sync operation")

        if not check_mount_status():
            logging.warning("NFS not mounted, attempting to remount")
            if not setup_nfs():
                logging.error("Failed to setup NFS, skipping sync")
                return False

        # Ensure rsync is installed
        try:
            subprocess.run(
                "which rsync || apk add --no-cache rsync",
                shell=True,
                check=True,
                capture_output=True
            )
        except subprocess.CalledProcessError as e:
            logging.error(f"Failed to install rsync: {e}")
            return False

        sync_script = """
        rsync -av --delete --exclude '/mnt/local' /mnt/pv/ /mnt/local/ --stats
        """

        try:
            process = subprocess.run(
                ['/bin/sh', '-c', sync_script],
                capture_output=True,
                text=True,
                timeout=300
            )

            if process.returncode != 0:
                logging.error(f"Sync operation failed: {process.stderr}")
                return False
            else:
                logging.info("Sync operation completed successfully")
                logging.debug(f"Sync details: {process.stdout}")
                return True

        except subprocess.TimeoutExpired:
            logging.error("Sync operation timed out")
            return False
        except Exception as e:
            logging.error(f"Unexpected error during sync: {e}")
            return False

    def handle_redis_connection():
        while True:
            try:
                logging.info("Connecting to Redis...")
                r = redis.Redis(
                    host='redis-service',
                    port=6379,
                    decode_responses=True,
                    socket_timeout=5,
                    socket_keepalive=True,
                    health_check_interval=30
                )

                pubsub = r.pubsub(ignore_subscribe_messages=True)
                pubsub.subscribe('file_changes')
                logging.info("Successfully connected to Redis and subscribed to file_changes")

                while True:
                    try:
                        message = pubsub.get_message(timeout=1.0)
                        if message and message['type'] == 'message':
                            logging.info(f"Received message: {message['data']}")
                            reset_debounce_timer()
                    except TimeoutError:
                        # This is expected, just continue
                        continue
                    except Exception as e:
                        logging.error(f"Error processing message: {e}")
                        raise

            except (ConnectionError, TimeoutError) as e:
                logging.error(f"Redis connection error: {e}")
                logging.info("Retrying in 5 seconds...")
                time.sleep(5)
                continue
            except Exception as e:
                logging.error(f"Unexpected error: {e}")
                logging.info("Retrying in 5 seconds...")
                time.sleep(5)
                continue

    def debounce_sync():
        global last_sync_time, sync_thread
        logging.info("Starting debounced sync")

        while True:
            current_time = time.time()
            with debounce_lock:
                if current_time - last_sync_time >= DEBOUNCE_TIME:
                    logging.info("Debounce period elapsed, executing sync")
                    run_sync_operation()
                    last_sync_time = 0
                    sync_thread = None
                    return
            time.sleep(1)

    def reset_debounce_timer():
        global last_sync_time, sync_thread
        with debounce_lock:
            last_sync_time = time.time()
            logging.info(f"Debounce timer reset. Next sync in {DEBOUNCE_TIME} seconds")

        if sync_thread is None or not sync_thread.is_alive():
            sync_thread = threading.Thread(target=debounce_sync)
            sync_thread.daemon = True
            sync_thread.start()
            logging.info("Started new sync thread")

    def main():
        logging.info("Starting NFS sync service")

        if not setup_nfs():
            logging.error("Initial setup failed, exiting...")
            return

        if not run_sync_operation():
            logging.error("Initial sync failed, but continuing to listen for changes...")

        handle_redis_connection()

    if __name__ == "__main__":
        main()

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nfs-local-sync
  labels:
    app: nfs-local-sync
spec:
  selector:
    matchLabels:
      app: nfs-local-sync
  template:
    metadata:
      labels:
        app: nfs-local-sync
    spec:
      containers:
      - name: sync-container
        image: python:3.11-alpine
        command: ["/bin/sh", "-c"]
        args:
          - |
            apk add --no-cache rsync nfs-utils && \
            pip install redis && \
            python /scripts/nfs_sync_listener.py
        securityContext:
          privileged: true
        volumeMounts:
        - name: nfs-volume
          mountPath: /mnt/pv
        - name: local-volume
          mountPath: /mnt/local
        - name: sync-script
          mountPath: /scripts
      volumes:
      - name: nfs-volume
        hostPath:
          path: /mnt/pv
          type: DirectoryOrCreate
      - name: local-volume
        hostPath:
          path: /mnt/local
          type: DirectoryOrCreate
      - name: sync-script
        configMap:
          name: file-sync-script
      restartPolicy: Always