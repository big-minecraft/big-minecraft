apiVersion: apps/v1
kind: Deployment
metadata:
  name: panel
  labels:
    {{- include "common.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: panel
  template:
    metadata:
      labels:
        app: panel
    spec:
      serviceAccountName: kubectl-sa
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: Exists
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"
      volumes:
        - name: app-source
          emptyDir:
            medium: Memory
        - name: host-root
          hostPath:
            path: /
            type: Directory
        - name: kube-config
          emptyDir: {}
      securityContext:
        fsGroup: 1000
      initContainers:
        - name: fetch-source
          image: curlimages/curl:latest
          securityContext:
            runAsUser: 0
          command:
            - sh
            - -c
            - |
              mkdir -p /tmp/source
              mkdir -p /usr/src/app
              curl -L -o /tmp/source/app.tar.gz https://api.github.com/repos/BigMinecraftFramework/bmc-panel/tarball/main && \
              cd /tmp/source && \
              tar -xzf app.tar.gz && \
              EXTRACTED_DIR=$(ls -d */ | head -n 1) && \
              cp -r /tmp/source/$EXTRACTED_DIR/* /usr/src/app/ && \
              chown -R 1000:1000 /usr/src/app && \
              chmod -R 755 /usr/src/app
          volumeMounts:
            - name: app-source
              mountPath: /usr/src/app
      containers:
        - name: panel
          image: node:18-alpine
          securityContext:
            runAsUser: 0
            runAsGroup: 0
          workingDir: /usr/src/app
          command:
            - sh
            - -c
            - |
              apk add --no-cache bash && \
              cd /usr/src/app && \
              # export NODE_ENV=development && \
              npm install && \
              npm run start
          ports:
            - containerPort: 3000
          env:
            - name: INITIAL_INVITE_CODE
              value: {{ .Values.global.inviteCode }}
            - name: PANEL_HOST
              value: {{ .Values.global.panelDomain }}
            - name: K8S_DASHBOARD_HOST
              value: {{ .Values.global.k8sDashboardDomain }}
            - name: MARIADB_PASSWORD
              value: {{ .Values.global.mariaDBPassword }}
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: {{ .Values.global.mongoDBPassword }}
            - name: BMC_PATH
              value: {{ .Values.global.bmcPath }}
            - name: ENVIRONMENT
              value: {{ .Values.global.environment }}
          volumeMounts:
            - name: app-source
              mountPath: /usr/src/app
            - name: host-root
              mountPath: /host-root
              readOnly: false
---
apiVersion: v1
kind: Service
metadata:
  name: panel-service
  labels:
    {{- include "common.labels" . | nindent 4 }}
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /api$1
spec:
  selector:
    app: panel
  ports:
    - name: app
      protocol: TCP
      port: 443
      targetPort: 3000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: panel-ingress
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "64m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "15"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/connection-upgrade: "true"
    nginx.ingress.kubernetes.io/upgrade: "websocket"
    nginx.ingress.kubernetes.io/use-regex: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - {{ .Values.global.panelDomain }}
    secretName: panel-tls-secret  # cert-manager will create this secret
  rules:
    - host: {{ .Values.global.panelDomain }}
      http:
        paths:
          - path: /(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: panel-service
                port:
                  number: 443
---
apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  name: default
  namespace: metallb-system
  labels:
    {{- include "common.labels" . | nindent 4 }}
spec:
  addresses:
    - {{ .Values.global.loadBalancerIP }}/32
  autoAssign: true
---
apiVersion: metallb.io/v1beta1
kind: L2Advertisement
metadata:
  name: default
  namespace: metallb-system
spec:
  ipAddressPools:
    - default
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # Email address used for ACME registration
    email: your-email@contact.com  # Replace with your email
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-prod-private-key
    solvers:
    - http01:
        ingress:
          class: nginx