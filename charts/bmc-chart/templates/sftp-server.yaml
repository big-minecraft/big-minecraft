apiVersion: apps/v1
kind: Deployment
metadata:
  name: sftp-server
  labels:
    app: sftp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sftp
  template:
    metadata:
      labels:
        app: sftp
    spec:
      nodeSelector:
        node-role.kubernetes.io/master: "true"
      tolerations:
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      initContainers:
      - name: init-sftp-setup
        image: alpine
        securityContext:
          privileged: true
          runAsUser: 0
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Setting up SFTP directory..."
            echo "SFTP directory setup complete."
        volumeMounts:
          - name: sftp-volume
            mountPath: /home/user/nfsshare
            mountPropagation: HostToContainer
      containers:
      - name: sftp-server
        image: atmoz/sftp
        securityContext:
          privileged: true
          runAsUser: 0
        ports:
          - containerPort: 22
        env:
          - name: SFTP_USERS
            value: "user:password:1001:1001"
        volumeMounts:
          - name: sftp-volume
            mountPath: /home/user/nfsshare
            mountPropagation: HostToContainer
      - name: file-monitor
        image: alpine
        securityContext:
          privileged: true
          runAsUser: 0
        command: ["/bin/sh", "-c"]
        args:
          - |
            apk add --no-cache inotify-tools redis
            SFTP_DIR="/home/user/nfsshare"
            REDIS_HOST="redis-service"
            REDIS_PORT=6379
            echo "Monitoring directory: $SFTP_DIR"
            echo "Connecting to Redis at $REDIS_HOST:$REDIS_PORT"
            inotifywait -m -r -e create -e modify -e delete --format '%w%f' "$SFTP_DIR" | while read FILE
            do
              echo "Event detected for file: $FILE"
              if [[ ! -e "$FILE" ]]; then
                  MESSAGE="File deleted: $FILE"
                  echo "$MESSAGE"
              else
                  MESSAGE="File changed: $FILE"
                  echo "$MESSAGE"
              fi
              echo "Publishing message to Redis: $MESSAGE"
              redis-cli -h $REDIS_HOST -p $REDIS_PORT PUBLISH file_changes "$MESSAGE" || echo "Failed to publish message to Redis"
            done
        volumeMounts:
          - name: sftp-volume
            mountPath: /home/user/nfsshare
            mountPropagation: HostToContainer
      volumes:
      - name: sftp-volume
        hostPath:
          path: /mnt/nfsshare
          type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: sftp-service
spec:
  selector:
    app: sftp
  ports:
    - name: sftp
      port: 22
      targetPort: 22
      {{- if eq .Values.global.environment "development" }}
      nodePort: 30022
      {{- end }}
  type: {{ ternary "NodePort" "ClusterIP" (eq .Values.global.environment "development") }}
