apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  labels:
    app: {{ .Values.name }}
    cadvisor: "true"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
        cadvisor: "true"
        kyriji.dev/enable-server-discovery: "true"
        kyriji.dev/enable-panel-discovery: "true"
        kyriji.dev/deployment-type: "persistent"

        kyriji.dev/initial-server: "{{ .Values.queuing.initialServer }}"
        kyriji.dev/require-startup-confirmation: "{{ .Values.queuing.requireStartupConfirmation }}"
        kyriji.dev/queue-strategy: "FILL"

        kyriji.dev/scale-strategy: "THRESHOLD"
        kyriji.dev/max-players: "{{ .Values.scaling.maxPlayers }}"
        kyriji.dev/min-instances: "1"
        kyriji.dev/max-instances: "1"
        kyriji.dev/scale-up-threshold: "0"
        kyriji.dev/scale-down-threshold: "0"
        kyriji.dev/scale-up-cooldown: "0"
        kyriji.dev/scale-down-cooldown: "0"
        kyriji.dev/scale-up-limit: "1"
        kyriji.dev/scale-down-limit: "1"

    spec:
      nodeSelector:
        kubernetes.io/hostname: "{{ .Values.dedicatedNode }}"
      terminationGracePeriodSeconds: 60
      containers:
      - name: mc
        image: {{ .Values.server.image }}
        command: ["/bin/bash", "-c"]
        args:
          - |
            # Set up server control files
            CONTROL_DIR="/tmp/mc_control"
            SHOULD_RUN_FILE="${CONTROL_DIR}/should_run"
            TERMINATION_FILE="${CONTROL_DIR}/terminating"
            INPUT_PIPE="${CONTROL_DIR}/server_input"

            # Create control directory
            mkdir -p "${CONTROL_DIR}"

            # Install redis-cli if needed
            if ! command -v redis-cli &> /dev/null; then
              apt-get update &> /dev/null && apt-get install -y redis-tools &> /dev/null
            fi

            # Function to send Redis notification
            send_redis_notification() {
              local message="{\"server\": \"$HOSTNAME\", \"deployment\": \"$DEPLOYMENT_NAME\", \"event\": \"shutdown\", \"timestamp\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"}"
              redis-cli -h {{ .Values.server.redis.host }} -p {{ .Values.server.redis.port }} PUBLISH server-status "$message" &> /dev/null
            }

            # SIGTERM handler
            handle_sigterm() {
              echo "Received SIGTERM signal" > "${CONTROL_DIR}/sigterm_received"
              # Create termination file
              touch "${TERMINATION_FILE}"
              # Don't exit the script - let the main loop handle termination
            }

            # Set up trap
            trap handle_sigterm SIGTERM

            cd {{ .Values.volume.mountPath }}
            if [ ! -f "./{{ .Values.server.jarName }}" ]; then
              echo "Jar file not found! Check your deployment configuration file."
              ls -la ./
              exit 1
            fi

            # Set up control files
            touch "${SHOULD_RUN_FILE}"
            rm -f "${TERMINATION_FILE}"
            rm -f "${INPUT_PIPE}"
            mkfifo "${INPUT_PIPE}"

            # Start server monitoring in background
            (
              while [ -f "${SHOULD_RUN_FILE}" ] && [ ! -f "${TERMINATION_FILE}" ]; do
                sleep 2
              done

              if [ -f "${TERMINATION_FILE}" ]; then
                echo "Termination file detected, shutting down server..."
                echo "stop" > "${INPUT_PIPE}"
                # Wait for server to shut down
                sleep 10
                rm -f "${SHOULD_RUN_FILE}"
                send_redis_notification
              fi
            ) &

            # Run the server
            while [ -f "${SHOULD_RUN_FILE}" ]; do
              echo "Starting Minecraft server..."

              # If termination is requested, don't start
              if [ -f "${TERMINATION_FILE}" ]; then
                echo "Termination requested, not starting server"
                break
              fi

              # Start server with input pipe
              tail -f "${INPUT_PIPE}" | java {{ .Values.server.jvmOpts | default "" }} -jar ./{{ .Values.server.jarName }} {{ .Values.server.args | default "nogui" }}

              # If termination is requested, exit loop
              if [ -f "${TERMINATION_FILE}" ]; then
                echo "Server terminated due to shutdown request"
                break
              fi

              # Normal exit or crash
              echo "Server exited, checking if restart is needed..."
              sleep 2
            done

            echo "Exiting script"
            send_redis_notification
            exit 0
        volumeMounts:
          - name: local-volume
            mountPath: {{ .Values.volume.mountPath | default "/minecraft" }}
        ports:
        - containerPort: {{ .Values.server.port | default 25565 }}
          name: minecraft
        env:
        {{- range .Values.server.env }}
        - name: {{ .name }}
          value: {{ .value | quote }}
        {{- end }}
        - name: REDIS_HOST
          value: {{ .Values.server.redis.host | quote }}
        - name: REDIS_PORT
          value: {{ .Values.server.redis.port | quote }}
        - name: DEPLOYMENT_NAME
          value: {{ .Values.name | quote }}
        resources:
          requests:
            memory: {{ .Values.resources.requests.memory }}
            cpu: {{ .Values.resources.requests.cpu }}
          limits:
            memory: {{ .Values.resources.limits.memory }}
            cpu: {{ .Values.resources.limits.cpu }}

      - name: cadvisor
        image: gcr.io/cadvisor/cadvisor:v0.47.0
        ports:
        - containerPort: 8080
          name: cadvisor
        labels:
          app: cadvisor
        volumeMounts:
          - name: docker-sock
            mountPath: /var/run/docker.sock
          - name: rootfs
            mountPath: /rootfs
          - name: proc
            mountPath: /proc
          - name: sys
            mountPath: /sys
          - name: local-volume
            mountPath: /mnt/local/deployments/{{ .Values.volume.dataDirectory }}

      volumes:
      - name: local-volume
        hostPath:
          path: /mnt/nfsshare/deployments/{{ .Values.volume.dataDirectory }}
          type: Directory
      - name: docker-sock
        hostPath:
        path: /var/run/docker.sock
      - name: rootfs
        hostPath:
          path: /
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys