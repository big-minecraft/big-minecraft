# Ensure this remains the same as the deployment's name.
name: example-deployment

queuing:
  # Whether or not this deployment should be used for initial connections. (AKA Lobby Servers)
  initialServer: 'true'

  # The strategy to use when placing players in instances.
  #
  # FILL - Try to completely fill one instance before sending players to another.
  #
  # SPREAD - Try to evenly spread players between all available instances.
  queueStrategy: FILL

  # Whether or not this deployment needs to tell BMC when it is in a queueable state.
  #
  # If enabled, you are responsible for setting each instance's state to RUNNING using BMC API to allow queuing.
  # If disabled, each instance will be instantly queueable, potentially before it has finished booting.
  # It is recommended you enable this if you have the capability/knowledge to run your own code on each instance.
  requireStartupConfirmation: 'false'


scaling:
  # The strategy to use when deciding when to scale up or down instances.
  #
  # THESHOLD - Scale up/down based on defined threshold values in the config.
  #
  # TREND - Automatically use queueing trends to decide when to scale up/down.
  scaleStrategy: THRESHOLD

   # The maximum number of players per instance.
  maxPlayers: 10

  # The minimum number of instances this deployment can have.
  minInstances: 2

  # The maximum number of instances this deployment can have. Use "unlimited" to remove this limit.
  maxInstances: 10

  # The number of player per instance in the deployment that triggers a scale-up
  scaleUpThreshold: 5

  # The number of player per instance in the deployment that triggers a scale-down
  scaleDownThreshold: 2

  # How often the deployment can be scaled up in seconds.
  scaleUpCooldown: 60

  # How often the deployment can be scaled down in seconds.
  scaleDownCooldown: 120

  # The maximum number of instances that can be started in a scale-up cycle.
  scaleUpLimit: 1

  # The maximum number of instances that can be stopped in a scale-down cycle.
  scaleDownLimit: 1


server:
  # Change this if you need to use a different java version.
  image: openjdk:21-jdk-slim

  # This is the name of your jarfile located in the base deployment directory.
  jarName: server.jar

  # Include any JVM options.
  jvmOpts: ""

  # Include any JVM args.
  args: "nogui"

  # Do not change this unless you know what you're doing. All internal servers should be able to run on the same port.
  port: 25565

  # Optional ENV variables. These example ones have no real effect and are just for demonstration.
  env:
    - name: EULA
      value: "TRUE"
    - name: VERSION
      value: "1.20.2"

  # The redis endpoint used to relay power actions internally.
  redis:
    host: redis-service
    port: 6379

# File server configuration - serves files via HTTPS
fileServer:
  # Enable HTTP file server for this deployment
  enabled: false
  
  # Port for the file server (default: 8080)
  port: 8080
  
  # Maximum file upload/download size (nginx limit)
  maxFileSize: "100m"
  
  # HTTP cache control header for served files
  cacheControl: "public, max-age=3600"


volume:
  # The directory to pull the server's data from. By default this is set to the folder that is automatically created for the deployment.
  dataDirectory: temp

  # Where the contents of the aformentioned data directory is copied to internally. There is no real reason to change this.
  mountPath: /minecraft


# Set recource limits per instance. "Mi" refers to megabytes, and "m" refers to micro-cpus.
resources:
  requests:
    memory: 0Mi
    cpu: 0m
  limits:
    memory: 0Mi
    cpu: 0m